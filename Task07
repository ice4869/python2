#樞紐分析表
import pandas as pd

#建立 DataFrame
data = {
    '訂單日期':['2022-01-01' , '2022-01-02' , '2022-01-03' , '2022-01-04' , '2022-01-05',
            '2022-01-06' , '2022-01-07' , '2022-01-08' , '2022-01-09' , '2022-01-10'],
        '產品名稱':['A產品','B產品','C產品','A產品','B產品','C產品','A產品','B產品','C產品','A產品'],
        '單價':[100 , 200 , 300 , 100 , 200 , 300 , 100 , 200 , 300 , 100],
        '數量':[10 , 20 , 30 , 10 , 20 ,30 , 10 , 20 ,30, 10],
        '總價':[1000 , 4000 , 9000 , 1000 , 4000 , 9000 , 1000 , 4000 , 9000 , 1000]
}

df = pd.DataFrame(data)

#顯示前幾筆資料
#print(df.head())

#使用 pivot_table 函數計算每個產品的平均單價和總銷售額
pivot = pd.pivot_table(df , values = ['單價' , '總價'] , index = '產品名稱' , aggfunc = {'單價' :'mean' , '總價':'sum'})
#print(pivot)

#線性回歸分析
import pandas as pd
import statsmodels.api as sm

#建立 DataFrame
data = {
    'x':[1,2,3,4,5],
    'y':[2,4,6,8,10]
}

df = pd.DataFrame(data)

# 建立線性回歸
model = sm.formula.ols('y~x' , data = df).fit()

#輸出回歸結果
#print(model.summary())
#print(model.params)

#假設檢定
import pandas as pd
import numpy as np
import statsmodels.stats.api as sms

#建立DataFrame
data = {
    'group':['A'] * 5 + ['B'] * 5 ,
    'value':[10,12,8,11,9,13,15,11,14,12]
}

df = pd.DataFrame(data)

#進行 t檢定
result = sms.ttest_ind(df[df['group'] == 'A']['value'], df[df['group'] == 'B']['value'])

#輸出結果
#print(result)

#ANOVA 分析
import pandas as pd
import statsmodels.api as sm
from statsmodels.formula.api import ols

#建立 DataFrame
data = {
    'group':['A'] * 5 + ['B'] * 5 + ['C'] * 5 ,
    'value':[10 ,12,8,11,9,
             13,15,11,14,12,
             18,16,17,19,15]
}

df = pd.DataFrame(data)
#進行ANOVA分析
model = ols('value ~ group ' , data = df).fit()
anova_table = sm.stats.anova_lm(model)
#print(anova_table)

import pandas as pd

# 創建數據
data = {'group': ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
                  'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',
                  'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'],
        'effect': [3.1, 3.3, 3.2, 2.8, 2.9, 3.5, 3.4, 2.9, 3.2, 3.0,
                   2.8, 2.7, 2.5, 2.4, 2.9, 2.6, 2.5, 2.7, 2.8, 2.6,
                   1.9, 2.1, 1.8, 1.7, 2.0, 2.2, 2.1, 1.9, 1.8, 1.7]}

df = pd.DataFrame(data)
from statsmodels.formula.api import ols

# 創建線性回歸模型
model = ols('effect ~ group', data=df).fit()

from statsmodels.stats.anova import anova_lm

# 進行ANOVA分析
anova_results = anova_lm(model)

# 輸出結果
print(anova_results)

#Task07-02
import numpy as np
import pandas as pd

# 原始資料
ipl_data = {
    'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',
    'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],
    'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],
    'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],
    'Points':[876,789,863,673,741,812,756,788,694,701,804,690]
}

df = pd.DataFrame(ipl_data)
# 使用pivot_table()進行轉換
team_year_count = df.pivot_table(index = 'Year' , columns = 'Team' , values = 'Rank' , aggfunc = 'count')

#print(team_year_count )

#Task07-03
import pandas as pd
import statsmodels.api as sm

source = 'https://raw.githubusercontent.com/cbrownley/foundations-for-analytics-with-python/master/statistics/winequality-both.csv'
df = pd.read_csv(source)

#將後10筆資料當作測試資料
test = df.tail(10)
testy = test['quality']
testX = sm.add_constant(test[test.columns.difference(['type' , 'quality'] ) ] )

#將除了type和quality之外的欄位作為訓練資料
train = df.head(-10)
y = train['quality']
X = sm.add_constant(train[train.columns.difference(['type' , 'quality'] ) ] )

#使用最小平方法進行迴歸分析
model = sm.OLS(y , X).fit()

print(model.summary()) 

# 預測測試資料的quality值
print(model.predict(testX)) 
